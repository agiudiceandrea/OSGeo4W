diff --git a/external/wintoast/src/wintoastlib.cpp b/external/wintoast/src/wintoastlib.cpp
index 1efe3922f..1efceeb5a 100644
--- a/external/wintoast/src/wintoastlib.cpp
+++ b/external/wintoast/src/wintoastlib.cpp
@@ -442,22 +442,23 @@ bool WinToast::initialize(_Out_ WinToastError* error) {
         return false;
     }
 
-
     if (_aumi.empty() || _appName.empty()) {
         setError(error, WinToastError::InvalidParameters);
         DEBUG_MSG(L"Error while initializing, did you set up a valid AUMI and App name?");
         return false;
     }
 
+#if 0
     if (createShortcut() < 0) {
         setError(error, WinToastError::ShellLinkNotCreated);
-        DEBUG_MSG(L"Error while attaching the AUMI to the current proccess =(");
+        DEBUG_MSG(L"Error while attaching the AUMI to the current process =(");
         return false;
     }
+#endif
 
     if (FAILED(DllImporter::SetCurrentProcessExplicitAppUserModelID(_aumi.c_str()))) {
         setError(error, WinToastError::InvalidAppUserModelID);
-        DEBUG_MSG(L"Error while attaching the AUMI to the current proccess =(");
+        DEBUG_MSG(L"Error while attaching the AUMI to the current process =(");
         return false;
     }
 
@@ -512,6 +513,7 @@ HRESULT	WinToast::validateShellLinkHelper(_Out_ bool& wasChanged) {
                         hr = DllImporter::PropVariantToString(appIdPropVar, AUMI, MAX_PATH);
                         wasChanged = false;
                         if (FAILED(hr) || _aumi != AUMI) {
+#if 0
                             // AUMI Changed for the same app, let's update the current value! =)
                             wasChanged = true;
                             PropVariantClear(&appIdPropVar);
@@ -525,6 +527,10 @@ HRESULT	WinToast::validateShellLinkHelper(_Out_ bool& wasChanged) {
                                     }
                                 }
                             }
+#else
+                            // Not allowed to touch the shortcut to fix the AUMI
+                            hr = E_FAIL;
+#endif
                         }
                         PropVariantClear(&appIdPropVar);
                     }
@@ -538,8 +544,8 @@ HRESULT	WinToast::validateShellLinkHelper(_Out_ bool& wasChanged) {
 
 
 HRESULT	WinToast::createShellLinkHelper() {
-	WCHAR   exePath[MAX_PATH]{L'\0'};
-	WCHAR	slPath[MAX_PATH]{L'\0'};
+    WCHAR exePath[MAX_PATH]{L'\0'};
+    WCHAR slPath[MAX_PATH]{L'\0'};
     Util::defaultShellLinkPath(_appName, slPath);
     Util::defaultExecutablePath(exePath);
     ComPtr<IShellLinkW> shellLink;
@@ -1032,4 +1038,4 @@ WinToastTemplate::AudioOption WinToastTemplate::audioOption() const {
 
 WinToastTemplate::Duration WinToastTemplate::duration() const {
     return _duration;
-}
\ No newline at end of file
+}
