diff --git a/cmake/FindPDAL.cmake b/cmake/FindPDAL.cmake
index 34a4ae5d75..1899d26de5 100644
--- a/cmake/FindPDAL.cmake
+++ b/cmake/FindPDAL.cmake
@@ -26,7 +26,7 @@ FIND_PATH(PDAL_INCLUDE_DIR pdal/pdal.hpp
   )
 FIND_PATH(PDAL_INCLUDE_DIR pdal/pdal.hpp)
 
-FIND_LIBRARY(PDAL_CPP_LIBRARY NAMES pdalccpp libpdalcpp PATHS
+FIND_LIBRARY(PDAL_CPP_LIBRARY NAMES pdalcpp libpdalcpp PATHS
   "$ENV{LIB_DIR}/lib"
   c:/msys/local/lib
   NO_DEFAULT_PATH
diff --git a/cmake/PyQtMacros.cmake b/cmake/PyQtMacros.cmake
index 774d042786..ece1b3e7f2 100644
--- a/cmake/PyQtMacros.cmake
+++ b/cmake/PyQtMacros.cmake
@@ -9,15 +9,7 @@ SET(PYUIC_PROG_NAMES pyuic5)
 SET(PYRCC_PROG_NAME pyrcc5)
 
 IF(NOT PYUIC_PROGRAM)
-  IF (MSVC)
-    FIND_PROGRAM(PYUIC_PROGRAM
-      NAMES ${PYUIC_PROG_NAME}.bat
-      PATHS $ENV{LIB_DIR}/bin
-    )
-  ELSE(MSVC)
-    FIND_PROGRAM(PYUIC_PROGRAM NAMES ${PYUIC_PROG_NAMES} PATHS $ENV{LIB_DIR}/bin)
-  ENDIF (MSVC)
-
+  FIND_PROGRAM(PYUIC_PROGRAM NAMES ${PYUIC_PROG_NAMES} PATHS $ENV{LIB_DIR}/bin)
   IF (NOT PYUIC_PROGRAM)
     MESSAGE(FATAL_ERROR "pyuic5 not found - aborting")
   ENDIF (NOT PYUIC_PROGRAM)
@@ -53,15 +45,7 @@ MACRO(PYQT_WRAP_UI outfiles )
 ENDMACRO(PYQT_WRAP_UI)
 
 IF(NOT PYRCC_PROGRAM)
-  IF (MSVC)
-    FIND_PROGRAM(PYRCC_PROGRAM
-      NAMES ${PYRCC_PROG_NAME}.bat
-      PATHS $ENV{LIB_DIR}/bin
-    )
-  ELSE(MSVC)
-    FIND_PROGRAM(PYRCC_PROGRAM ${PYRCC_PROG_NAME} PATHS $ENV{LIB_DIR}/bin)
-  ENDIF (MSVC)
-
+  FIND_PROGRAM(PYRCC_PROGRAM NAMES ${PYRCC_PROG_NAME} PATHS $ENV{LIB_DIR}/bin)
   IF (NOT PYRCC_PROGRAM)
     MESSAGE(FATAL_ERROR "pyrcc5 not found - aborting")
   ENDIF (NOT PYRCC_PROGRAM)
diff --git a/external/untwine/epf/FileProcessor.cpp b/external/untwine/epf/FileProcessor.cpp
index 07e498bd91..0b4e49c49d 100644
--- a/external/untwine/epf/FileProcessor.cpp
+++ b/external/untwine/epf/FileProcessor.cpp
@@ -50,7 +50,7 @@ void FileProcessor::run()
     // This is some random cell that ultimately won't get used, but it contains a buffer
     // into which we can write data.
     Cell *cell = m_cellMgr.get(VoxelKey());
-    f.setCallback([this, &count, &limit, &cell](pdal::PointRef& point)
+    f.setCallback([this, &CountIncrement, &count, &limit, &cell](pdal::PointRef& point)
         {
             // Write the data into the point buffer in the cell.  This is the *last*
             // cell buffer that we used. We're hoping that it's the right one.
diff --git a/external/untwine/untwine/MapFile.cpp b/external/untwine/untwine/MapFile.cpp
index ba205b38ad..9d520a8826 100644
--- a/external/untwine/untwine/MapFile.cpp
+++ b/external/untwine/untwine/MapFile.cpp
@@ -30,6 +30,11 @@
 
 #include "MapFile.hpp"
 
+#ifdef _MSC_VER
+#include <io.h>
+#include <fcntl.h>
+#endif
+
 namespace untwine
 {
 
diff --git a/python/__init__.py b/python/__init__.py
index 0eb585123a..643ccab276 100644
--- a/python/__init__.py
+++ b/python/__init__.py
@@ -66,6 +66,10 @@ if os.name == 'nt':
     # any of the QGIS modules or else it will error.
     setupenv()
 
+    if sys.version_info[0]>3 or (sys.version_info[0]==3 and sys.version_info[1]>=9):
+        for p in os.getenv("PATH").split(";"):
+            if os.path.exists(p):
+                os.add_dll_directory(p)
 
 from qgis.PyQt import QtCore
 
diff --git a/python/core/auto_generated/auth/qgsauthmanager.sip.in b/python/core/auto_generated/auth/qgsauthmanager.sip.in
index 93962d7494..b30e268d4a 100644
--- a/python/core/auto_generated/auth/qgsauthmanager.sip.in
+++ b/python/core/auto_generated/auth/qgsauthmanager.sip.in
@@ -817,6 +817,7 @@ Clear an authentication config from its associated authentication method cache
 
   protected:
 
+    explicit QgsAuthManager();
 
   public:
   protected:
diff --git a/src/app/CMakeLists.txt b/src/app/CMakeLists.txt
index 072e40a9bb..e3168a7841 100644
--- a/src/app/CMakeLists.txt
+++ b/src/app/CMakeLists.txt
@@ -419,9 +419,10 @@ if(HAVE_OPENCL)
 endif()
 
 if (HAVE_PDAL)
-  include_directories(SYSTEM
-    ${PDAL_INCLUDE_DIR}
-  )
+  include_directories(SYSTEM ${PDAL_INCLUDE_DIR})
+  if(MSVC)
+    add_definitions(-DWIN32_LEAN_AND_MEAN)
+  endif()
 endif()
 
 if(ENABLE_MODELTEST)
@@ -592,9 +593,7 @@ if (POSTGRES_FOUND)
 endif()
 
 if (HAVE_PDAL)
-  target_link_libraries(qgis_app
-    ${PDAL_LIBRARIES}
-  )
+  target_link_libraries(qgis_app ${PDAL_LIBRARIES})
 endif()
 
 if(MSVC)
diff --git a/src/app/qgisapp.cpp b/src/app/qgisapp.cpp
index c80097d690..45e2738d62 100644
--- a/src/app/qgisapp.cpp
+++ b/src/app/qgisapp.cpp
@@ -530,7 +530,7 @@ extern "C"
 #ifndef Q_OS_WIN
 #include <dlfcn.h>
 #else
-#include <windows.h>
+#include <shellapi.h>
 #include <dbghelp.h>
 #endif
 
diff --git a/src/core/CMakeLists.txt b/src/core/CMakeLists.txt
index 642547e8fd..360b56fb25 100644
--- a/src/core/CMakeLists.txt
+++ b/src/core/CMakeLists.txt
@@ -1635,9 +1635,7 @@ endif()
 protobuf_generate_cpp(VECTOR_TILE_PROTO_SRCS VECTOR_TILE_PROTO_HDRS vectortile/vector_tile.proto)
 set(QGIS_CORE_SRCS ${QGIS_CORE_SRCS} ${VECTOR_TILE_PROTO_SRCS})
 set(QGIS_CORE_HDRS ${QGIS_CORE_HDRS} ${VECTOR_TILE_PROTO_HDRS})
-if (MSVC)
-  set_source_files_properties(${VECTOR_TILE_PROTO_SRCS} vectortile/qgsvectortilemvtdecoder.cpp vectortile/qgsvectortilemvtencoder.cpp vectortile/qgsvectortilewriter.cpp PROPERTIES COMPILE_DEFINITIONS PROTOBUF_USE_DLLS)
-else()
+if (NOT MSVC)
   # automatically generated file produces warnings (unused-parameter, unused-variable, misleading-indentation)
   set_source_files_properties(${VECTOR_TILE_PROTO_SRCS} PROPERTIES COMPILE_FLAGS -w)
 endif()
diff --git a/src/providers/pdal/CMakeLists.txt b/src/providers/pdal/CMakeLists.txt
index dd3cbbd646..7553755b04 100644
--- a/src/providers/pdal/CMakeLists.txt
+++ b/src/providers/pdal/CMakeLists.txt
@@ -1,6 +1,9 @@
 ########################################################
 # Files
 
+if(MSVC)
+  add_definitions(-DWIN32_LEAN_AND_MEAN)
+endif(MSVC)
 
 set(THREADS_PREFER_PTHREAD_FLAG ON)
 find_package(Threads REQUIRED)
