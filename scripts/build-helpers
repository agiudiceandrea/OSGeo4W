set -e

export MASTER_REPO=http://download.osgeo.org/osgeo4w
export OSGEO4W_SCRIPTS=$(cygpath -a "$( dirname "${BASH_SOURCE[0]}" )")
export OSGEO4W_PWD=$PWD

export PYTHON=Python39

savelog() {
	local f=$1
	rm -f $f.9
	for i in $(seq 8 -1 0); do ! [ -f "$f.$i" ] || mv $f.$i $f.$(( i + 1 )); done
	! [ -f $f ] || mv $f $f.0
}
declare -x savelog

log() {
	echo "$(date +"%Y-%m-%d %H:%M:%S"): $*"
}
declare -x log

startlog() {
	echo "Local package repository: $OSGEO4W_REP"
	echo "Logging to $OSGEO4W_PWD/package.log"
	savelog package.log
	exec > >(tee package.log) 2>&1

	export PATH=$(cygpath -S):$(cygpath -W):$(cygpath -S)/WBem:/bin:/usr/bin
	log "Starting with clean PATH: $PATH"

	[ "$BUILDDEPENDS" == "none" ] || {
		fetchdeps $BUILDDEPENDS
		export RUNTIMEDEPENDS=$(runtimedepends $BUILDDEPENDS)
	}

	trap "faillog" EXIT
}
declare -x startlog

runtimedepends() {
	local depends

	for p in "$@"; do
                if [ -f "$OSGEO4W_PWD/osgeo4w/etc/abi/$p" ]; then
			depends="$depends $(<$OSGEO4W_PWD/osgeo4w/etc/abi/$p)"
                fi
        done

	echo ${depends# }
}
declare -x runtimedepends

endlog() {
	local r=$?
	if [ $r == 0 ]; then
		log "Local repository updates:"
		regen
		(
			cd $OSGEO4W_REP
			diff -u x86_64/setup.ini.prev x86_64/setup.ini || true
		)
	fi
	trap "" EXIT
	finishlog
	return $r
}
declare -x endlog

faillog() {
	log "FAILED: $?"
	finishlog
	return 1
}
declare -x faillog

finishlog() {
	log "END"
}
declare -x finishlog

#
# run a configuration batch file and source environment changes
#
fetchenv() {
        local IFS
        IFS=
        batch=$1
        shift

        if ! [ -f "$batch" ]; then
                echo "$batch not found"
                return 1
        fi

        srcenv=$(mktemp /tmp/srcenv.XXXXXXXXXX)
        dstenv=$(mktemp /tmp/dstenv.XXXXXXXXXX)
        diffenv=$(mktemp /tmp/diffenv.XXXXXXXXXX)
        envdiff=$(mktemp /tmp/envdiff.XXXXXXXXXX)
        cmd /c set >$srcenv
        cmd /c call $(cygpath -w $batch) "$@" \>nul 2\>nul \& set >$dstenv
        cat <<EOF >$envdiff
/^+++/d;
/^[^+]/d;
s/^+//;
# s/\\\\/\\\\\\\\/g;
/^PATH=/ {
        s/\\\\/\\//g;
        s#\\([=;]\\)\\([a-zA-Z]\\):#\\1/cygdrive/\\2#g;
        s/;/:/g;
}
s/;/\\\\;/g;
s/^/export /;
s/=/='/;
s/\\\\r//g;
s/\r$/'/;
EOF
        diff -u $srcenv $dstenv | sed -f $envdiff >$diffenv
        . $diffenv
        PATH=$PATH:/bin:/usr/bin:$(cygpath --sysdir):$(cygpath --windir)
        rm -f $srcenv $dstenv $diffenv $envdiff
}
declare -x fetchenv

vs2019env() {
	local e vcdir

	vcdir=0
	for e in Community Professional Enterprise; do
		d=$(cygpath "$PROGRAMFILES (x86)\\Microsoft Visual Studio\\2019\\$e")
		if [ -d "$d" ]; then
			vcdir=$d
			break
		fi
	done

	if [ -z "$vcdir" ]; then
		echo "Visual Studio 2019 not found" >&2
		exit 1
	fi

	export VS160COMNTOOLS=$(cygpath -aw "$vcdir")/Common7/Tools
	fetchenv "$vcdir/VC/Auxiliary/Build/vcvarsall.bat" ${VCARCH:-amd64} $VCSDK
	export PATH="$vcdir/VC/bin:$PATH"
	export CC=cl.exe
	export CXX=cl.exe
}
declare -x vs2019env

cmakeenv() {
	local pf=$(cygpath "$PROGRAMFILES")

	if ! [ -x "$pf/CMake/bin/cmake.exe" ]; then
		# FIXME: install
		echo "CMake not found"
		exit 1
	fi

	export PATH="$pf/CMake/bin:$PATH"
}
declare -x cmakeenv

ninjaenv() {
	if ! [ -x "$OSGEO4W_SCRIPTS/ninja.exe" ]; then
		(
			cd $OSGEO4W_SCRIPTS
			wget -O /tmp/ninja.zip https://github.com/ninja-build/ninja/releases/download/v1.10.1/ninja-win.zip
			unzip /tmp/ninja.zip

			chmod a+rx ninja.exe
		)
	fi

	if ! [ -x "$OSGEO4W_SCRIPTS/ninja.exe" ]; then
		echo "Ninja not found"
		exit 1
	fi

	export PATH="$PATH:$OSGEO4W_SCRIPTS"
}

regen() {
	(
		# update local package repository
		cd $OSGEO4W_REP
		! [ -f x86_64/setup.ini ] || cp x86_64/setup.ini x86_64/setup.ini.prev
		perl $OSGEO4W_SCRIPTS/genini --arch=x86_64 --output=x86_64/setup.ini.tmp --recursive x86_64/release
		mv x86_64/setup.ini.tmp x86_64/setup.ini
		bzip2 -c x86_64/setup.ini >x86_64/setup.ini.bz2
	)
}
declare -x regen

setuppid() {
	local pid rest
	while read pid rest; do
		echo $pid
	done < <(ps auxw -W | fgrep "$(cygpath -aw $OSGEO4W_SCRIPTS/osgeo4w-setup.exe)")
}
declare -x setuppid

fetchdeps() {
	local p missing

	if [ -d "$OSGEO4W_PWD/osgeo4w" ]; then
		missing=
		for p in "$@"; do
			if [ -f "$OSGEO4W_PWD/osgeo4w/etc/setup/$p.lst.gz" ]; then
				continue
			fi

			missing="$missing $p"
		done

		if [ -z "$missing" ]; then
			log "No missing dependencies"
			if [ -n "$OSGEO4W_SKIP_UPDATE" ]; then
				return 0
			fi
		fi
	fi

	if ! [ -x "$OSGEO4W_SCRIPTS/osgeo4w-setup.exe" ]; then
		wget -O "$OSGEO4W_SCRIPTS/osgeo4w-setup.exe" $MASTER_REPO/osgeo4w-setup-x86_64.exe
	fi

	if ! regen; then
		log "regen failed"
	fi

	local pid=$(setuppid)
	if [ -n "$pid" ]; then
		log "osgeo4w-setup still running"
		false
	fi

	local cmd="cygstart --action=runas"
	cmd="$cmd $OSGEO4W_SCRIPTS/osgeo4w-setup.exe"
	cmd="$cmd --root $(cygpath -aw $OSGEO4W_PWD/osgeo4w)"
	cmd="$cmd --autoaccept"
	cmd="$cmd --advanced"
	cmd="$cmd --arch x86_64"
	cmd="$cmd --quiet-mode"
	cmd="$cmd --upgrade-also"
	cmd="$cmd --only-site"
	cmd="$cmd -s $(cygpath -am $OSGEO4W_REP)"
	# cmd="$cmd -s $MASTER_REPO"    # FIXME
	cmd="$cmd -l $(cygpath -aw $OSGEO4W_REP/package-cache)"

	for p in "$@"; do
		cmd="$cmd -P $p"
	done

	log "OSGEO4W:$cmd"
	$cmd

	until pid=$(setuppid); do
		:
	done

	log "osgeo4w-setup started [$pid]"

	local cpid=
	while cpid=$(setuppid) && (( pid == cpid )); do
		log "osgeo4w-setup $pid still running"
		sleep 1
	done

	log "osgeo4w-setup ended"

	missing=
	for p in "$@"; do
		if [ -f "$OSGEO4W_PWD/osgeo4w/etc/setup/$p.lst.gz" ]; then
			continue
		fi

		missing="$missing $p"
	done

	if [ -z "$missing" ]; then
		return 0
	else
		log "Missing dependencies:$missing"
		for i in osgeo4w/setup.log osgeo4w/setup.log.full osgeo4w/var/log/setup.log osgeo4w/var/log/setup.log.full; do
			[ -f $i ] && cat $i
		done
		return 1
	fi
}
declare -x fetchdeps

getpackages() {
	# wget -c -q -O /tmp/setup-master.ini $MASTER_REPO/x86_64/setup.ini 1>&2

	(
		# sed -ne 's/^@ //p' /tmp/setup-master.ini
		sed -ne 's/^@ //p' /tmp/setup.ini
	) | sort -u
}
declare -x getpackages

nextbinary() {
	local p
	if [ "$1" = "next" ]; then
		p=$P
	else
		p=$1
	fi

	wget -c -q -O /tmp/setup-master.ini $MASTER_REPO/x86_64/setup.ini 1>&2

	regen 1>&2

	b=$(
		(
			sed -ne '/^@ '$p'$/,/^$/ { s/^version: '$V'-\([0-9]*\)$/\1/p; }' /tmp/setup-master.ini
			sed -ne '/^@ '$p'$/,/^$/ { s/^version: '$V'-\([0-9]*\)$/\1/p; }' $OSGEO4W_REP/x86_64/setup.ini
			echo 0
		) | sort -rn | head -1
	)

	(( b++ )) || true

	echo $b
}

packagewheel() {
	log "Packaging $P-$V with pip"

	local p=${P#python3-}
	if [ "$P" == "$p" ]; then
		log "Expecting python3- prefix"
		return 1
	fi

	local v
	export v
	if [ "$V" == "pip" ]; then
		v=
	else
		v="==$V"
	fi

	mkdir -p build install

	export wheelopts
	(
		fetchenv osgeo4w/bin/o4w_env.bat
		vs2019env

		type -p python

		#	--ignore-installed \
		#	--no-compile \

		log building extension $p$v
		if ! python -m pip \
			wheel \
			-w "$(cygpath -am install)" \
			--no-binary :all: \
			--no-cache-dir \
			--no-deps \
			$wheelopts \
			"$p$v"
		then
			log wheel failed: $?
			return 1
		fi

		if [ $(ls -1 install/*.whl | wc -l) != 1 ]; then
			log expected one wheel: install/*.whl
			return 1
		fi
	)

	whl=install/*.whl

	export R=$OSGEO4W_REP/x86_64/release/python3/$P
	mkdir -p $R/$P

	unzip -p $whl "*/METADATA" >/tmp/$P.metadata

	declare -A fields
	exec 3</tmp/$P.metadata

	local IFS=": "
	while read k v <&3; do
		[ -n "$k" ] || break
		v="${fields[$k]} $v"
		fields+=([$k]=${v## })
	done

	set +x
	desc=
	while read r <&3; do
		desc="$desc
$r"
	done
	set -x

	exec 3>&-

	[ "$p" == "${fields[Name]}" ]

	if [ "$V" == "pip" ]; then
		V=${fields[Version]}
		if [ "$B" == "pip" ]; then
			B=$(nextbinary)
		fi
	fi

	[ "$V" != "pip" ]
	[ "$B" != "pip" ]
	[ -n "${fields[Summary]}" ]
	[ -n "$desc" ] || desc=${fields[Summary]}

	requires=${fields[Requires-Dist]}
	[ -z "$requires" ] || requires=" $requires"
	requires="${requires// / python3-}"
	[ "$p" != "setuptools" ] || requires=" python3-devel$requires"

	log "Package: $P-$V-$B"

	cat <<EOF >$R/setup.hint
sdesc: "${fields[Summary]}"
ldesc: "$desc"
category: Libs
maintainer: $MAINTAINER
requires: python3-core python3-pip$requires
EOF

	cat <<EOF >postinstall.bat
call "%OSGEO4W_ROOT%\\bin\\o4w_env.bat"
pip install "%OSGEO4W_ROOT%\\apps\\$PYTHON\\wheels\\$base"
$postinstall
EOF

	cat <<EOF >preremove.bat
call "%OSGEO4W_ROOT%\\bin\\o4w_env.bat"
pip uninstall $name
del "%OSGEO4W_ROOT%\\apps\\$PYTHON\\wheels\\$base"
$preremove
EOF

	tar -cjf "$R/$P-$V-$B.tar.bz2" \
		--xform "s,postinstall.bat,etc/postinstall/$P.bat," \
		--xform "s,preremove.bat,etc/preremove/$P.bat," \
		--xform "s,install/,apps/$PYTHON/wheels/," \
		$additionalfiles \
		postinstall.bat \
		preremove.bat \
		$whl

	tar -C .. -cjf "$R/$P-$V-$B-src.tar.bz2" osgeo4w/package.sh

	(
		echo "License from wheel metadata:"
		sed -ne "s/^Classifier: License :://p" /tmp/$P.metadata
	) >$R/$P-$V-$B.txt
}

# make sure we are using what we expect
awk() { /bin/awk "$@"; }
bash() { /bin/bash "$@"; }
cat() { /bin/cat "$@"; }
cp() { /bin/cp "$@"; }
rm() { /bin/rm "$@"; }
mkdir() { /bin/mkdir "$@"; }
tar() { /bin/tar "$@"; }
ls() { /bin/ls "$@"; }
sed() { /bin/sed "$@"; }
diff() { /bin/diff "$@"; }
patch() { /bin/patch "$@"; }
find() { /bin/find "$@"; }
xargs() { /bin/xargs "$@"; }
flip() { /bin/flip "$@"; }
touch() { /bin/touch "$@"; }
unzip() { /bin/unzip "$@"; }
sort() { /bin/sort "$@"; }
make() { /bin/make "$@"; }
7z() { /bin/7z "$@"; }
cygpath() { /bin/cygpath "$@"; }

declare -x awk bash cat cp rm mkdir tar ls sed diff patch find xargs flip touch unzip cygpath

init() {
	if [ -n "$OSGEO4W_ROOT" ]; then
		echo "Builds are supposed to be run outside of OSGeo4W" >&2
		exit 1
	fi


	# Verify that a repository is set
	if ! [ -d "$OSGEO4W_REP" ]; then
		echo "No repository" >&2
		exit 1
	fi

	if [ -z "$MAINTAINER" ]; then
		echo "No maintainer" >&2
		exit 1
	fi

	if [ -z "$P" ]; then
		echo "no package name in P" >&2
		exit 1
	fi

	if [ -z "$V" ]; then
		echo "No (upstream) version in V" >&2
		exit 1
	fi

	case "$B" in
	next|"next "*)
		B=$(nextbinary ${B#next })
		echo "Binary package version: $P-$V-$B"
		;;

	pip)
		;;

	[0-9]*)
		;;

	"")
		echo "No binary version in B" >&2
		exit 1
		;;
	esac

	if [ -z "$BUILDDEPENDS" ]; then
		echo "No build dependencies" >&2
		exit 1
	fi
}

if [ -z "$NOINIT" ]; then
	init
fi

# vim: syntax=bash :
